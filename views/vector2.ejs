<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>Typhoon Track Prediction</title>
<script src="https://cdn.jsdelivr.net/npm/cesium@1.73.0/Build/Cesium/Cesium.js"></script>
<script src="/js/cesium-wind.js"></script>
<script src="./js/jquery.min.js"></script>
<script src="/js/bootstrap.bundle.min.js" integrity="sha384-JEW9xMcG8R+pH31jmWH6WWP0WintQrMb4s7ZOdauHnUtxwoG2vI5DkLtS3qm9Ekf" crossorigin="anonymous"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cesium@1.73.0/Build/Cesium/Widgets/widgets.css">
<link id="clayCSSTheme" rel="stylesheet" href="/css/atlas.css"> 
<link href="./css/pretty.css" rel="stylesheet">
<style type="text/css">
  html, body {
    margin: 0;
    height: 100%;
    width: 100%
  }

  .container {
    width: 100%;
    height: 100%
  }

</style>

</head>
<body>
<div id="map" class="container"></div>
<div style="position: absolute;left: 1em;z-index: 999;display: block;top:2em;">
    <div class="d-flex">
        <div class="my-auto" style="z-index: 2;">
        <img src="/img/logo2.png" class="img-fluid my-auto logo" style="width: 65%">
        <br>
        <img src="/img/logo-d-soc_2.png" height="50%" class="img-fluid my-auto logo" style="background-color: #FFFFFF;width: 65%">

        </div>
    </div>
</div>
<div id="toolbar" class="tool-bar-typhoon param-container">
    <div class="form-group">
      <label class="toggle-switch"><span id="typhoon-menu">LAST TYPHOON TO BUSAN</span> <br>
        <input class="toggle-switch-check" type="checkbox" name="current-typhoon-check" onclick="addCurrentTyphoon();"/>
        <!--<span class="toggle-switch-label">Toggle Switch with data-label on and data-label-off</span> -->
        <span aria-hidden="true" class="toggle-switch-bar">
          <span class="toggle-switch-handle" data-label-off="Point off" data-label-on="Point On">
            <span class="button-icon button-icon-on toggle-switch-icon">
              <svg class="lexicon-icon lexicon-icon-product-menu-open" focusable="false" role="presentation">
                <!--<use href="/images/icons/icons.svg#product-menu-open" /> -->
              </svg>
            </span>
            <span class="button-icon button-icon-off toggle-switch-icon">
              <svg class="lexicon-icon lexicon-icon-product-menu-closed" focusable="false" role="presentation">
                <!--<use href="/images/icons/icons.svg#product-menu-closed" /> -->
              </svg>
            </span>
          </span>
        </span>
      </label>
      <label class="toggle-switch">
        <input class="toggle-switch-check" type="checkbox" name="current-typhoon-line-check" onclick="addCurrentTyphoonLine();"/>
        <!--<span class="toggle-switch-label">Toggle Switch with data-label on and data-label-off</span> -->
        <span aria-hidden="true" class="toggle-switch-bar">
          <span class="toggle-switch-handle" data-label-off="Line Off" data-label-on="Line On">
            <span class="button-icon button-icon-on toggle-switch-icon">
              <svg class="lexicon-icon lexicon-icon-product-menu-open" focusable="false" role="presentation">
               <!-- <use href="/images/icons/icons.svg#product-menu-open" /> -->
              </svg>
            </span>
            <span class="button-icon button-icon-off toggle-switch-icon">
              <svg class="lexicon-icon lexicon-icon-product-menu-closed" focusable="false" role="presentation">
                <!--<use href="/images/icons/icons.svg#product-menu-closed" /> -->
              </svg>
            </span>
          </span>
        </span>
      </label>
      <br>
      <label class="toggle-switch"> <span id="typhoon-menu">BUSAN DIRECT TYPHOON</span><br>
        <input class="toggle-switch-check" type="checkbox" name="dir-busan-typhoon-check" onclick="addBusanDirectTyphoon();"/>
        <!--<span class="toggle-switch-label">Toggle Switch with data-label on and data-label-off</span> -->
        <span aria-hidden="true" class="toggle-switch-bar">
          <span class="toggle-switch-handle" data-label-off="Point Off" data-label-on="Point On">
            <span class="button-icon button-icon-on toggle-switch-icon">
              <svg class="lexicon-icon lexicon-icon-product-menu-open" focusable="false" role="presentation">
                <!--<use href="/images/icons/icons.svg#product-menu-open" /> -->
              </svg>
            </span>
            <span class="button-icon button-icon-off toggle-switch-icon">
              <svg class="lexicon-icon lexicon-icon-product-menu-closed" focusable="false" role="presentation">
                <!--<use href="/images/icons/icons.svg#product-menu-closed" /> -->
              </svg>
            </span>
          </span>
        </span>
      </label>
      <label class="toggle-switch">
        <input class="toggle-switch-check" type="checkbox" name="dir-typhoon-line-check" onclick="addBusanDirectTyphoonLine();"/>
        <!--<span class="toggle-switch-label">Toggle Switch with data-label on and data-label-off</span> -->
        <span aria-hidden="true" class="toggle-switch-bar">
          <span class="toggle-switch-handle" data-label-off=" Line Off" data-label-on="Line On">
            <span class="button-icon button-icon-on toggle-switch-icon">
              <svg class="lexicon-icon lexicon-icon-product-menu-open" focusable="false" role="presentation">
                <!--<use href="/images/icons/icons.svg#product-menu-open" />-->
              </svg>
            </span>
            <span class="button-icon button-icon-off toggle-switch-icon">
              <svg class="lexicon-icon lexicon-icon-product-menu-closed" focusable="false" role="presentation">
                <!--<use href="/images/icons/icons.svg#product-menu-closed" /> -->
              </svg>
            </span>
          </span>
        </span>
      </label>
      <br>
      <label class="toggle-switch"><span id="typhoon-menu"> ALL BUSAN TYPHOON</span><br>
        <input class="toggle-switch-check" type="checkbox" name="indir-busan-typhoon-check" onclick="addBusanIndirectTyphoon();"/>
        <!--<span class="toggle-switch-label">Toggle Switch with data-label on and data-label-off</span> -->
        <span aria-hidden="true" class="toggle-switch-bar">
          <span class="toggle-switch-handle" data-label-off="Point Off" data-label-on="Point On">
            <span class="button-icon button-icon-on toggle-switch-icon">
              <svg class="lexicon-icon lexicon-icon-product-menu-open" focusable="false" role="presentation">
                <use href="/images/icons/icons.svg#product-menu-open" />
              </svg>
            </span>
            <span class="button-icon button-icon-off toggle-switch-icon">
              <svg class="lexicon-icon lexicon-icon-product-menu-closed" focusable="false" role="presentation">
                <use href="/images/icons/icons.svg#product-menu-closed" />
              </svg>
            </span>
          </span>
        </span>
      </label>
      <label class="toggle-switch">
        <input class="toggle-switch-check" type="checkbox" name="indir-typhoon-line-check" onclick="addBusanIndirectTyphoonLine();"/>
        <!--<span class="toggle-switch-label">Toggle Switch with data-label on and data-label-off</span> -->
        <span aria-hidden="true" class="toggle-switch-bar">
          <span class="toggle-switch-handle" data-label-off=" Line Off" data-label-on="Line On">
            <span class="button-icon button-icon-on toggle-switch-icon">
              <svg class="lexicon-icon lexicon-icon-product-menu-open" focusable="false" role="presentation">
                <use href="/images/icons/icons.svg#product-menu-open" />
              </svg>
            </span>
            <span class="button-icon button-icon-off toggle-switch-icon">
              <svg class="lexicon-icon lexicon-icon-product-menu-closed" focusable="false" role="presentation">
                <use href="/images/icons/icons.svg#product-menu-closed" />
              </svg>
            </span>
          </span>
        </span>
      </label>
    </div>
    <div class="autocomplete w-100 mb-1" style="min-width: 150px;">
            <input id="myInput" class="form-control form-control-sm font-small text-end rounded-0" type="text" placeholder="Searching for typhoon" onfocus="this.value=&#39;&#39;" name="location" autocomplete="off" style="background-color: rgba(255,255,255,.2);color:white;border:1px solid rgba(255,255,255,.1);">
        </div>
        <div class="param-item">
            <button type="button" id="startField" class="button black" onclick="CurTrackPrediction();">Current Prediction</button> <br>
            <button type="button" id="changeFieldData" class="button black" onclick="TrackSimulation();">Track Prediction Simulation</button>
            <button type="button" id="animation" class="button black" onclick="animation();">Animation</button>
        </div>
</div>

<script>
Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJiZDI3NjJhNy04ZWY5LTQ2MGQtOTlmYS1iYmQ5Mzk2ZTFiZGIiLCJpZCI6MTEzOTE1LCJpYXQiOjE2Njc3OTg4MzF9.vD7OvMcMgSE7NOMHx-_OafQwTqciERnKhMLEi-y6zlQ'

  //set the location center
  var west = 85.803554;
  var south = 1.405057;
  var east = 176.971518;
  var north = 70.220270;
  var rectangle = Cesium.Rectangle.fromDegrees(west, south, east, north);
  Cesium.Camera.DEFAULT_VIEW_FACTOR = 0;
  Cesium.Camera.DEFAULT_VIEW_RECTANGLE = rectangle;
  var viewer = new Cesium.Viewer('map');
  var scene = viewer.scene;
  /*
  var viewer = new Cesium.Viewer('map', {timeline: true, animation: false, homeButton: false,screenModePicker: false, navigationHelpButton: false, baseLayerPicker: false, geocoder: false, sceneMode: Cesium.SceneMode.SCENE3D}

  );
*/

  //hide the time line and clock
  viewer.animation.container.style.visibility = 'hidden';
  viewer.timeline.container.style.visibility = 'hidden';
  viewer.forceResize();
  viewer._cesiumWidget._creditContainer.style.display = "none"; //hide the cesium logo
  
  var entity = viewer.entities.add({id: 'mousemoveLabel',label: {show: false}});
  var mouseLabelCb = function (e) {
      var ellipsoid = viewer.scene.globe.ellipsoid;
      // Mouse over the globe to see the cartographic position
      var cartesian = viewer.camera.pickEllipsoid(new Cesium.Cartesian2(e.clientX, e.clientY), ellipsoid);
      if (cartesian) {
          var cartographic = ellipsoid.cartesianToCartographic(cartesian);
          var longitudeString = Cesium.Math.toDegrees(cartographic.longitude).toFixed(10);
          var latitudeString = Cesium.Math.toDegrees(cartographic.latitude).toFixed(10);
          entity.position = cartesian;
          entity.label.show = true;
          entity.label.text = '(' + longitudeString + ', ' + latitudeString + ')';
      } else {
        entity.label.show = false;
      }
  };
  viewer.scene.canvas.addEventListener('mousemove', mouseLabelCb);
  viewer.scene.canvas.addEventListener('wheel', mouseLabelCb);

  const windOptions = {
    colorScale: [
      'rgb(36,104, 180)',
      'rgb(60,157, 194)',
      'rgb(128,205,193 )',
      'rgb(151,218,168 )',
      'rgb(198,231,181)',
      'rgb(238,247,217)',
      'rgb(255,238,159)',
      'rgb(252,217,125)',
      'rgb(255,182,100)',
      'rgb(252,150,75)',
      'rgb(250,112,52)',
      'rgb(245,64,32)',
      'rgb(237,45,28)',
      'rgb(220,24,32)',
      'rgb(180,0,35)',
    ],
    frameRate: 16,
    height: 200000.0,
    maxAge: 60,
    globalAlpha: 0.9,
    velocityScale: 1 / 50,
    paths: 2000
  };


//console.log(sample_typ_name);
var retrieved_data = function getdata(){
    var tmp=null;
    $.ajax({           
        type: "GET",
        async: false,
        dataType: "json",
        url: "/simulation/finaltrack/combine/danas_2019",
        success: function (data) {
          tmp=data;
        }
      })
    return tmp;
  }();

var pred_data = retrieved_data.predictionPoint; 
var actu_data = retrieved_data.actualLine;
var predLin_data = retrieved_data.predictionLine;

console.log(pred_data);
dat = ['/2019/07/16/00','/2019/07/16/06','/2019/07/16/12','/2019/07/16/18','/2019/07/17/00','/2019/07/17/06','/2019/07/17/12','/2019/07/17/18','/2019/07/18/00','/2019/07/18/06','/2019/07/18/12','/2019/07/18/18','/2019/07/19/00','/2019/07/19/06','/2019/07/19/12','/2019/07/19/18','/2019/07/20/00','/2019/07/20/06','/2019/07/20/12','/2019/07/20/18','/2019/07/21/00','/2019/07/21/06','/2019/07/21/12']
//ts=19 //5
ts=5 //5

animation(pred_data.features[ts],dat[ts]);

/*
pred_data.features.forEach(function (item, index) {
  //console.log(item, index);
//  animation(item, index)

});
*/


var dataSource1 = new Cesium.GeoJsonDataSource();
  var typtrack = dataSource1.load(pred_data);
  typtrack.then(function(dataSource1a) {
      viewer.dataSources.add(dataSource1);
      viewer.zoomTo(dataSource1);
      var entities = dataSource1.entities.values;
      var colorHash = {};
      for (var i = 0; i < entities.length; i++) {
          var entity = entities[i];
          entity.billboard = undefined;
          entity.point = new Cesium.PointGraphics({
              color: Cesium.Color.GOLD,
              pixelSize: 5
          });
      }
  }).otherwise(function(error){
      //Display any errrors encountered while loading.
      //window.alert(error);
  });

    var prom_pred = Cesium.GeoJsonDataSource.load(predLin_data, {
        clampToGround : false,
        //extrudedHeight : 300.0,
        width : 5.0,
        cornerType: Cesium.CornerType.MITERED,
        //color : Cesium.Color.GREEN
    });
    prom_pred.then(function(dataSource) {
        viewer.dataSources.add(dataSource);
        var entities = dataSource.entities.values;
        for (var i = 0; i < entities.length; i++)
        {
          var entity = entities[i];     
          entity.polylineVolume = new Cesium.PolylineVolumeGraphics({
            positions: entity.polyline.positions,
            shape: computeCircle(6),
            material: Cesium.Color.BLACK,
            color: Cesium.Color.BLACK,
            outlineColor: color,
          });         
          viewer.zoomTo(entities);
        }
    }).otherwise(function(error){
        //Display any errors encountered while loading.
        //window.alert(error);
    }); 

  var promise = Cesium.GeoJsonDataSource.load(actu_data, {
        clampToGround : false,
        //extrudedHeight : 300.0,
        width : 5.0,
        cornerType: Cesium.CornerType.MITERED,
        material : Cesium.Color.GREEN
    });
    promise.then(function(dataSource) {
        viewer.dataSources.add(dataSource);
        var entities = dataSource.entities.values;
        for (var i = 0; i < entities.length; i++)
        {
          var entity = entities[i];     
          entity.polylineVolume = new Cesium.PolylineVolumeGraphics({
            positions: entity.polyline.positions,
            shape: computeCircle(6),
            color: Cesium.Color.RED
          });         
          viewer.zoomTo(entities);
        }
    }).otherwise(function(error){
        //Display any errors encountered while loading.
        //window.alert(error);
    });  



function animation(pred,dat){
  var billboards = scene.primitives.add(new Cesium.BillboardCollection());
  //console.log(pred.geometry.coordinates[0]);
  center_lon = pred.geometry.coordinates[0]
  center_lat = pred.geometry.coordinates[1]
  console.log(center_lon,center_lat);
  hour = 0;
  hourstr = hour.toString();
  if (hour<10){
    hourstr = '0'+hourstr;
  }
  //date = '/2019/07/16/'+hourstr
  date = dat
  
  file = '/data/danas2019_z0'+date+'00-wind-surface-level-wrf-1.0.json'
  fetch(file)
  .then(res => res.json())
  .then(res => {
      var wspd0 = [];
      var sst0 = [];
      var nx = res[0].header.nx;
      var ny = res[0].header.ny;
      var hg = parseInt(res[0].header.z);
      n = nx*ny;
      for (j=0;j<n;j++){
        uwind=res[0].data[j];
        vwind=res[1].data[j];
        temp=Math.sqrt(Math.pow(uwind,2)+Math.pow(vwind,2));
        wspd0.push(temp);
      }
      //tair0=res[11].data[j];
      sst0=res[10].data;
      //console.log(sst0); 
      file = '/data/danas2019_z1'+date+'00-wind-surface-level-wrf-1.0.json'
      fetch(file)
      .then(res => res.json())
      .then(res => {
          var wspd0 = [];
          var tair1 = [];
          var nx = res[0].header.nx;
          var ny = res[0].header.ny;
          var hg = parseInt(res[0].header.z);
          n = nx*ny;
          for (j=0;j<n;j++){
            uwind=res[0].data[j];
            vwind=res[1].data[j];
            temp=Math.sqrt(Math.pow(uwind,2)+Math.pow(vwind,2));
            wspd0.push(temp);
          }
          //tair0=res[11].data[j];
          tair1=res[11].data;
          //console.log(tair1);

          var deltaT1 = tair1.map(function(item, index) {
            return Math.abs((item-273.15) - (sst0[index]-273.15)); //(variation should be less than 40 km/h between the ocean surface and the troposphere)
          })
          file = '/data/danas2019_z7'+date+'00-wind-surface-level-wrf-1.0.json'        
          fetch(file)
              .then(res => res.json())
              .then(res => {
                  var wspd1 = []; var tair2 = [];
                  var nx = res[0].header.nx;
                  var ny = res[0].header.ny;
                  var hg = parseInt(res[0].header.z);
                  n = nx*ny;
                  for (j=0;j<n;j++){
                    uwind=res[0].data[j];
                    vwind=res[1].data[j];
                    temp=Math.sqrt(Math.pow(uwind,2)+Math.pow(vwind,2));
                    wspd1.push(temp); 
                  }
                  tair2=res[11].data;
                  var wsh = wspd1.map(function(item, index) {
                    return Math.abs(item - wspd0[index]); //(variation should be less than 40 km/h between the ocean surface and the troposphere)
                  })
                  var deltaT2 = tair2.map(function(item, index) {
                    return Math.abs((item-273.15) - (sst0[index]-273.15)); //(variation should be less than 40 km/h between the ocean surface and the troposphere)
                  })                
                  
                  for (n=0;n<8;n++){
                    //radius = 0.5*Math.exp(n);
                    //radius = 0.05*n*Math.exp(n*0.2);
                    //radius = Math.pow(n,0.8);
                    radius = (n)*0.243243243;
                    console.log(radius) 
                    //radius = n*0.8
                    lon_rad1 = center_lon-radius
                    lon_rad2 = center_lon+radius
                    lat_rad1 = center_lat-radius
                    lat_rad2 = center_lat+radius
                    console.log(lon_rad1,lat_rad1);

                    file = '/data/danas2019_z'+n.toString()+date+'00-wind-surface-level-wrf-1.0.json'  
                    fetch(file)
                      .then(res => res.json())
                      .then(res => {
                        var dx = res[0].header.dx;
                        var dy = res[0].header.dy;
                        var la1 = res[0].header.la1;
                        var la2 = res[0].header.la2;
                        var lo1 = res[0].header.lo1;
                        var lo2 = res[0].header.lo2; 
                        var nx = res[0].header.nx;
                        var ny = res[0].header.ny;
                        var hg = res[0].header.z;
                        g = 9.81; // in m/s2
                        nd=0;
                        lat = la1;
                        for (j=0;j<ny;j++){
                          lat = lat-dy;
                          lon = lo1;
                          for (i=0;i<nx;i++){
                              lon = lon+dx;
                              uwind=res[0].data[nd];
                              vwind=res[1].data[nd];
                              wshi=wsh[nd];
                              ph=res[2].data[nd];
                              phb=res[3].data[nd];
                              z = (ph+phb)/g;
                              p=res[4].data[nd];
                              qc=res[6].data[nd];
                              qc=qc*Math.pow(10,14);
                              div= res[7].data[nd];
                              vor=res[8].data[nd];
                              qv=res[9].data[nd];
                              qv=qv*Math.pow(10,7);
                              sst=(res[10].data[nd])-273.15;
                              deltaTi=deltaT1[nd];

                              //console.log(deltaTi); 
                              //console.log(mamad);

                              delx = Math.abs(lon-center_lon)
                              dely = Math.abs(lat-center_lat)                           
                              
                              if (Math.pow(delx,2)+Math.pow(dely,2) <= Math.pow(radius,2)){  
                                //if ( p < 995  &&  vor > 1 &&  div < -1 && sst > 26.5 &&  wshi < 6.5){
                                if ( vor > 1){  
                                  mutiplier=200  
                                  colvalp=Cesium.Color.WHITE; 
                                  psip=9;
                                  
                                                                   
                                  billboards.add({
                                    position : new Cesium.Cartesian3.fromDegrees(lon, lat, z*mutiplier),
                                    //image : '/img/cloud1.png'
                                    image : '/img/smoke1.png',
                                    material: Cesium.Color.RED.withAlpha(0.5),
                                  });
                                  

                                  /*
                                  var debris = viewer.entities.add({
                                    //position : Cesium.Cartesian3.fromDegrees(lon, lat, z),
                                    position : Cesium.Cartesian3.fromDegrees(lon, lat, z*mutiplier),
                                    point : {
                                      color : colvalp,
                                      pixelSize : psip,
                                      name : p
                                    }
                                  }); */ 
                                  
                                }
                              }
                              nd=nd+1;
                          }  
                        }
                      });
                  } 
              }) 
        }) 
    
  })

  //data_wind='/jangmi_rev4/2020/08/08/'+hourstr+'00-wind-surface-level-wrf-1.0.json' //wind.json
  data_wind_z0='/data/danas2019_z0'+date+'00-wind-surface-level-wrf-1.0.json' //wind.json
   fetch(data_wind_z0)
    .then(res => res.json())
    .then(res => {
      const windLayer = new CesiumWind.WindLayer(res, {windOptions});
      windLayer.addTo(viewer);
    });
  for (n=0;n<1;n++){
  file = '/data/danas2019_z'+n.toString()+date+'00-wind-surface-level-wrf-1.0.json'  
  fetch(file)
    .then(res => res.json())
    .then(res => {
      var dx = res[0].header.dx;
      var dy = res[0].header.dy;
      var la1 = res[0].header.la1;
      var la2 = res[0].header.la2;
      var lo1 = res[0].header.lo1;
      var lo2 = res[0].header.lo2; 
      var nx = res[0].header.nx;
      var ny = res[0].header.ny;
      var hg = res[0].header.z;
      g = 9.81; // in m/s2
      nd=0;
      lat = la1;
      for (j=0;j<ny;j++){
        lat = lat-dy;
        lon = lo1;
        for (i=0;i<nx;i++){
            lon = lon+dx;
            uwind=res[0].data[nd];
            vwind=res[1].data[nd];
            ph=res[2].data[nd];
            phb=res[3].data[nd];
            z = (ph+phb)/g;
            p=res[4].data[nd];
            qc=res[6].data[nd];
            qc=qc*Math.pow(10,14);
            div= res[7].data[nd];
            vor=res[8].data[nd];
            qv=res[9].data[nd];
            qv=qv*Math.pow(10,7);
            sst=(res[10].data[nd])-273.15;        
              //if ( p < 995  &&  vor > 1 &&  div < -1 && sst > 26.5 &&  wshi < 6.5){
              if ( p < 995  &&  vor > 1 &&  div < -1 && sst > 29.5){  
                mutiplier=100  
                colvalp=Cesium.Color.WHITE; 
                psip=9;
                
                                                 
                billboards.add({
                  position : new Cesium.Cartesian3.fromDegrees(lon, lat, z*mutiplier),
                  //image : '/img/cloud1.png'
                  image : '/img/smoke1.png'
                });
                
                
                /*
                var debris = viewer.entities.add({
                  //position : Cesium.Cartesian3.fromDegrees(lon, lat, z),
                  position : Cesium.Cartesian3.fromDegrees(lon, lat, z*mutiplier),
                  point : {
                    color : colvalp,
                    pixelSize : psip,
                    name : p
                  }
                }); */
                
                 
                
              }
            nd=nd+1;
        }  
      }
    });
}   
}




// for wind speed
/* 
 if ( vor > 2  ){
  colvalvor=Cesium.Color.RED; 
  psivor=5;
  var debris = viewer.entities.add({
    position : Cesium.Cartesian3.fromDegrees(lon, lat, z),
    point : {
      color : colvalvor,
      pixelSize : psivor,
      name : div
    }
  });
}
*/



/*

fetch('/data/windwrf_2020082100.json')
  .then(res => res.json())
  .then(res => {
    res.forEach(cekdata);
    function cekdata(item, index) {
        val = item.wind;
        if (2 <= val &&  val < 3){colval=Cesium.Color.LIGHTGREEN; psi=0;}
        else if (3 <= val &&  val < 5){colval=Cesium.Color.HONEYDEW;psi=0;}
        else if (5 <= val &&  val < 8){colval=Cesium.Color.GREENYELLOW;psi=0.5;} 
        else if (8 <= val &&  val < 10){colval=Cesium.Color.GREEN ;psi=1;}
        else if (10 <= val &&  val < 12){colval=Cesium.Color.GRAY ;psi=8;} 
        else if (12 <= val &&  val < 14){colval=Cesium.Color.GOLDENROD;psi=9;}
        else if (14 <= val &&  val < 15){colval=Cesium.Color.GOLD;psi=10;}
        else {colval=Cesium.Color.TRANSPARENT;psi=0;}
        var debris = viewer.entities.add({
          position : Cesium.Cartesian3.fromDegrees(item.lon, item.lat, item.z),
          point : {
            color : colval,
            pixelSize : psi
          }
        });
      }
  }); 

  fetch('/data/windwrf_2020082100_lvl2.json')
  .then(res => res.json())
  .then(res => {
    res.forEach(cekdata);
    function cekdata(item, index) {
        val = item.wind;
        if (2 <= val &&  val < 3){colval=Cesium.Color.LIGHTGREEN; psi=0;}
        else if (3 <= val &&  val < 5){colval=Cesium.Color.HONEYDEW;psi=0;}
        else if (5 <= val &&  val < 8){colval=Cesium.Color.GREENYELLOW;psi=0.5;} 
        else if (8 <= val &&  val < 10){colval=Cesium.Color.GREEN ;psi=1;}
        else if (10 <= val &&  val < 12){colval=Cesium.Color.GRAY ;psi=8;} 
        else if (12 <= val &&  val < 14){colval=Cesium.Color.GOLDENROD;psi=9;}
        else if (14 <= val &&  val < 15){colval=Cesium.Color.GOLD;psi=10;}
        else {colval=Cesium.Color.TRANSPARENT;psi=0;}
        var debris = viewer.entities.add({
          position : Cesium.Cartesian3.fromDegrees(item.lon, item.lat, item.z),
          point : {
            color : colval,
            pixelSize : psi
          }
        });
      }

  }); 
*/

</script>
<script src="/js/highstock.js"></script>
<script src="/js/highcharts-3d.js"></script>
<script src="/js/highcharts-more.js"></script>
<%- include ('modal'); %>

<script src="/js/typhoontrack.js"></script>

</body>
</html>